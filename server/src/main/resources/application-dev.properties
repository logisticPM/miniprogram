# 服务器端口配置# 服务器端口配置
server.port=8080

# 关闭Spring Boot默认的错误页面
server.error.whitelabel.enabled=false

# 指定错误处理页面的路径
server.error.path=/error

# 设置最大HTTP头大小
server.max-http-header-size=100000

# 数据源配置 - MySQL数据库连接
spring.datasource.url=jdbc:p6spy:mysql://127.0.0.1:3306/udyk_community?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&requireSSL=false
spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver

# 配置Druid连接池参数
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.validation-query=select 1

# 数据库用户名和密码
spring.datasource.username=root
spring.datasource.password=udyk@2023

# 上传目录配置
udyk.uploadDir=/app/upload
# 文件存储路径配置
udyk.filestorePath=filestore

# JPA配置 - 禁用自动创建或更新数据库结构
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none

# flyway 配置
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-description=从1_0_2开始，之前的不进行迁移
spring.flyway.baseline-version=1_0_1

# 指定属性命名策略为蛇形命名法
spring.jackson.property-naming-strategy=SNAKE_CASE

# 日期格式和时区配置
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# 日志级别配置
logging.level.org.springframework.web=DEBUG

# Spring DevTools配置 - 启用 livereload 和重启功能
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true
spring.devtools.restart.exclude=META-INF/**

# Redis配置
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=
# Redis服务器的数据库编号,表示使用第0个数据库
spring.redis.database=0
# Redis服务器的连接超时时间
spring.redis.timeout=10000
# 连接池最大连接数
spring.redis.lettuce.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.lettuce.pool.max-wait=-1ms
# 连接池中的最大空闲连接
spring.redis.lettuce.pool.max-idle=10
# 连接池中的最小空闲连接
spring.redis.lettuce.pool.min-idle=0



# 配置文件上传功能的参数
# 启用Spring Servlet的文件上传功能
spring.servlet.multipart.enabled=true
# 设置单个上传文件的最大大小限制为2000MB
spring.servlet.multipart.max-file-size=2000MB
# 设置整个上传请求的最大大小限制为2000MB
spring.servlet.multipart.max-request-size=2000MB


# 应用管理和监控配置
management.endpoint.restart.enabled=true
server.tomcat.mbeanregistry.enabled=true

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############

# token 名称（同时也是 cookie 名称）
sa-token.token-name=Authorization
# token 有效期（单位：秒） 默认30天，-1 代表永久有效
sa-token.timeout=2592000
# token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
sa-token.active-timeout=-1
# 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
sa-token.is-concurrent=true
# 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
sa-token.is-share=true
# token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
sa-token.token-style=uuid
# 是否输出操作日志
sa-token.is-log=true
# sa-token 的 banner
sa-token.is-print=false
# jwt秘钥
sa-token.jwt-secret-key=kjlahfjkhasd
# 是否尝试从 cookie 里读取 Token，此值为 false 后，StpUtil.login(id) 登录时也不会再往前端注入Cookie
sa-token.is-read-cookie=false
# token前缀
sa-token.token-prefix=Bearer


# 解决 Cannot invoke “org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()” because “this.condition” is null
# 主要原因是springboot版本和springfox版本不兼容的问题
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

